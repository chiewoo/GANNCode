#!/usr/bin/env python
### This code uses FANN library 
### for Aritifical Neural Network analysis
### written by Young-Min Kim (young-min.kim@ligo.org)

from pyfann import libfann
from pylal import auxmvc_utils
from pylal import git_version
from optparse import OptionParser
from optparse import *
import glob
import sys
import matplotlib
matplotlib.use('Agg')
import pylab
import pdb
import numpy

def GetInputOutput(file_name):
	flines = open(file_name).readlines()
	num_inputs=int(flines.pop(0))
	variables = flines.pop(0).split()
	
	input=[]
	output=[]
	gps_snr_list=[]
	for line in flines:
		single=line.split()
		gline = ' '.join([str(single.pop(0)) for i in range(4)])
		gps_snr_list.append(gline)
		output.append([float(single.pop(-1))])
		input.append(map(float,single))
		
	return input, output, gps_snr_list, variables

def GetGPSSNR(file):
	flines = open(file).readlines()
	num_inputs=int(flines.pop(0))
	variables = flines.pop(0).split()
	
	gps_snr_list=[]
	for line in flines:
		single=line.split()
		gline = ' '.join([str(single.pop(0)) for i in range(4)])
		gps_snr_list.append(gline)
		
	return gps_snr_list, variables
	
def ReadPatFile(file):
	flines=open(file).readlines()
	variables=flines[1].split() + ['glitch-rank']
	formats=['g8' for a in range(len(variables))]
	MVSCTriggers=numpy.loadtxt(file,skiprows=2,dtype={'names':variables,'formats':formats})

	return MVSCTriggers

parser=OptionParser(version=git_version.verbose_msg)
parser.add_option("-e","--testing-file",action="store",type="string",help="Trigger file name to be used for evaluation")
parser.add_option("-n","--network",action="store",type="string",help="Network file name to be used for evaluation ")
parser.add_option("","--output-dir",action="store",type="string",default=".",help="saving results")
parser.add_option("-s","--saving-results",action="store",type="string",default=False,help="saving results")
(opts,files)=parser.parse_args()

try: os.mkdir(opts.output_dir)
except: pass

print "Importing network file : %s" % opts.network
ann = libfann.neural_net()
ann.create_from_file(opts.network)

#ann.print_parameters()
print "Network was generated by %s-algorithm" % ann.get_training_algorithm()

print "Reading evaluation data : %s" % opts.testing_file
test_data = libfann.training_data()
test_pat_data = ReadPatFile(opts.testing_file)
test_data.read_train_from_file(opts.testing_file.replace(".pat",".ann"))
test_input = test_data.get_input()
test_output = test_data.get_output()

ann.reset_MSE()
result_file=open(opts.output_dir+"/"+opts.saving_results,'w')
variables = ['index', 'i', 'w'] + list(test_pat_data.dtype.names)
first_line = " ".join(variables)
result_file.write(first_line + "\n")
w_row = numpy.ones(len(test_input))

print "Start evaluating data"
for i in range(len(test_input)):
	#calculating glitch-rank
	results=ann.run(test_input[i])
	#difference=abs(test_output[i][0] - results[0])
	variable_line = " ".join([str(var) for var in list(test_pat_data[i])[:-1]])
	#writing results
	result_file.write(str(i+1)+" "+str(test_output[i][0])+" "+str(w_row[i])+" "+variable_line+" "+str(results[0])+"\n")
result_file.close()

#print "MSE on evaluation data: %f" % ann.get_MSE()
print "Evaluation results are saved in %s/%s." % (opts.output_dir,opts.saving_results)
